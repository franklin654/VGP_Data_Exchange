package io.github.kitswas.VGP_Data_Exchange;


// Code generated by colf(1); DO NOT EDIT.
// The compiler used schema file demo.colf and GamePadReading.colf.


import static java.lang.String.format;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamException;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.InputMismatchException;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;


/**
 * Data bean with built-in serialization support.
 * Should be the same as the GamepadButtons enum in the Windows API.
 * https://learn.microsoft.com/en-us/uwp/api/windows.gaming.input.gamepadbuttons
 * Taken from windows.gaming.input.h
 * Slighly modified as Colfer does not support bitfields and enums yet.
 * @author generated by colf(1)
 * @see <a href="https://github.com/pascaldekloe/colfer">Colfer's home</a>
 */
public class GamepadButtons implements Serializable {

	/** The upper limit for serial byte sizes. */
	public static int colferSizeMax = 16 * 1024 * 1024;


	public boolean GamepadButtons_None;

	public boolean GamepadButtons_Menu;

	public boolean GamepadButtons_View;

	public boolean GamepadButtons_A;

	public boolean GamepadButtons_B;

	public boolean GamepadButtons_X;

	public boolean GamepadButtons_Y;

	public boolean GamepadButtons_DPadUp;

	public boolean GamepadButtons_DPadDown;

	public boolean GamepadButtons_DPadLeft;

	public boolean GamepadButtons_DPadRight;

	public boolean GamepadButtons_LeftShoulder;

	public boolean GamepadButtons_RightShoulder;

	public boolean GamepadButtons_LeftThumbstick;

	public boolean GamepadButtons_RightThumbstick;

	/** Default constructor */
	public GamepadButtons() {
		init();
	}


	/** Colfer zero values. */
	private void init() {
	}

	/**
	 * {@link #reset(InputStream) Reusable} deserialization of Colfer streams.
	 */
	public static class Unmarshaller {

		/** The data source. */
		protected InputStream in;

		/** The read buffer. */
		public byte[] buf;

		/** The {@link #buf buffer}'s data start index, inclusive. */
		protected int offset;

		/** The {@link #buf buffer}'s data end index, exclusive. */
		protected int i;


		/**
		 * @param in the data source or {@code null}.
		 * @param buf the initial buffer or {@code null}.
		 */
		public Unmarshaller(InputStream in, byte[] buf) {
			if (buf == null || buf.length == 0)
				buf = new byte[Math.min(GamepadButtons.colferSizeMax, 2048)];
			this.buf = buf;
			reset(in);
		}

		/**
		 * Reuses the marshaller.
		 * @param in the data source or {@code null}.
		 * @throws IllegalStateException on pending data.
		 */
		public void reset(InputStream in) {
			if (this.i != this.offset) throw new IllegalStateException("colfer: pending data");
			this.in = in;
			this.offset = 0;
			this.i = 0;
		}

		/**
		 * Deserializes the following object.
		 * @return the result or {@code null} when EOF.
		 * @throws IOException from the input stream.
		 * @throws SecurityException on an upper limit breach defined by {@link #colferSizeMax}.
		 * @throws InputMismatchException when the data does not match this object's schema.
		 */
		public GamepadButtons next() throws IOException {
			if (in == null) return null;

			while (true) {
				if (this.i > this.offset) {
					try {
						GamepadButtons o = new GamepadButtons();
						this.offset = o.unmarshal(this.buf, this.offset, this.i);
						return o;
					} catch (BufferUnderflowException e) {
					}
				}
				// not enough data

				if (this.i <= this.offset) {
					this.offset = 0;
					this.i = 0;
				} else if (i == buf.length) {
					byte[] src = this.buf;
					if (offset == 0) this.buf = new byte[Math.min(GamepadButtons.colferSizeMax, this.buf.length * 4)];
					System.arraycopy(src, this.offset, this.buf, 0, this.i - this.offset);
					this.i -= this.offset;
					this.offset = 0;
				}
				assert this.i < this.buf.length;

				int n = in.read(buf, i, buf.length - i);
				if (n < 0) {
					if (this.i > this.offset)
						throw new InputMismatchException("colfer: pending data with EOF");
					return null;
				}
				assert n > 0;
				i += n;
			}
		}

	}

	/**
	 * Gets the serial size estimate as an upper boundary, whereby
	 * {@link #marshal(byte[],int)} ≤ {@link #marshalFit()} ≤ {@link #colferSizeMax}.
	 * @return the number of bytes.
	 */
	public int marshalFit() {
		long n = 1L + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
		if (n < 0 || n > (long)GamepadButtons.colferSizeMax) return GamepadButtons.colferSizeMax;
		return (int) n;
	}

	/**
	 * Serializes the object.
	 * @param out the data destination.
	 * @param buf the initial buffer or {@code null}.
	 * @return the final buffer. When the serial fits into {@code buf} then the return is {@code buf}.
	 *  Otherwise the return is a new buffer, large enough to hold the whole serial.
	 * @throws IOException from {@code out}.
	 * @throws IllegalStateException on an upper limit breach defined by {@link #colferSizeMax}.
	 */
	public byte[] marshal(OutputStream out, byte[] buf) throws IOException {
		int n = 0;
		if (buf != null && buf.length != 0) try {
			n = marshal(buf, 0);
		} catch (BufferOverflowException e) {}
		if (n == 0) {
			buf = new byte[marshalFit()];
			n = marshal(buf, 0);
		}
		out.write(buf, 0, n);
		return buf;
	}

	/**
	 * Serializes the object.
	 * @param buf the data destination.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferOverflowException when {@code buf} is too small.
	 * @throws IllegalStateException on an upper limit breach defined by {@link #colferSizeMax}.
	 */
	public int marshal(byte[] buf, int offset) {
		int i = offset;

		try {
			if (this.GamepadButtons_None) {
				buf[i++] = (byte) 0;
			}

			if (this.GamepadButtons_Menu) {
				buf[i++] = (byte) 1;
			}

			if (this.GamepadButtons_View) {
				buf[i++] = (byte) 2;
			}

			if (this.GamepadButtons_A) {
				buf[i++] = (byte) 3;
			}

			if (this.GamepadButtons_B) {
				buf[i++] = (byte) 4;
			}

			if (this.GamepadButtons_X) {
				buf[i++] = (byte) 5;
			}

			if (this.GamepadButtons_Y) {
				buf[i++] = (byte) 6;
			}

			if (this.GamepadButtons_DPadUp) {
				buf[i++] = (byte) 7;
			}

			if (this.GamepadButtons_DPadDown) {
				buf[i++] = (byte) 8;
			}

			if (this.GamepadButtons_DPadLeft) {
				buf[i++] = (byte) 9;
			}

			if (this.GamepadButtons_DPadRight) {
				buf[i++] = (byte) 10;
			}

			if (this.GamepadButtons_LeftShoulder) {
				buf[i++] = (byte) 11;
			}

			if (this.GamepadButtons_RightShoulder) {
				buf[i++] = (byte) 12;
			}

			if (this.GamepadButtons_LeftThumbstick) {
				buf[i++] = (byte) 13;
			}

			if (this.GamepadButtons_RightThumbstick) {
				buf[i++] = (byte) 14;
			}

			buf[i++] = (byte) 0x7f;
			return i;
		} catch (ArrayIndexOutOfBoundsException e) {
			if (i - offset > GamepadButtons.colferSizeMax)
				throw new IllegalStateException(format("colfer: io.github.kitswas/VGP_Data_Exchange.GamepadButtons exceeds %d bytes", GamepadButtons.colferSizeMax));
			if (i > buf.length) throw new BufferOverflowException();
			throw e;
		}
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws SecurityException on an upper limit breach defined by {@link #colferSizeMax}.
	 * @throws InputMismatchException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset) {
		return unmarshal(buf, offset, buf.length);
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @param end the index limit for {@code buf}, exclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws SecurityException on an upper limit breach defined by {@link #colferSizeMax}.
	 * @throws InputMismatchException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset, int end) {
		if (end > buf.length) end = buf.length;
		int i = offset;

		try {
			byte header = buf[i++];

			if (header == (byte) 0) {
				this.GamepadButtons_None = true;
				header = buf[i++];
			}

			if (header == (byte) 1) {
				this.GamepadButtons_Menu = true;
				header = buf[i++];
			}

			if (header == (byte) 2) {
				this.GamepadButtons_View = true;
				header = buf[i++];
			}

			if (header == (byte) 3) {
				this.GamepadButtons_A = true;
				header = buf[i++];
			}

			if (header == (byte) 4) {
				this.GamepadButtons_B = true;
				header = buf[i++];
			}

			if (header == (byte) 5) {
				this.GamepadButtons_X = true;
				header = buf[i++];
			}

			if (header == (byte) 6) {
				this.GamepadButtons_Y = true;
				header = buf[i++];
			}

			if (header == (byte) 7) {
				this.GamepadButtons_DPadUp = true;
				header = buf[i++];
			}

			if (header == (byte) 8) {
				this.GamepadButtons_DPadDown = true;
				header = buf[i++];
			}

			if (header == (byte) 9) {
				this.GamepadButtons_DPadLeft = true;
				header = buf[i++];
			}

			if (header == (byte) 10) {
				this.GamepadButtons_DPadRight = true;
				header = buf[i++];
			}

			if (header == (byte) 11) {
				this.GamepadButtons_LeftShoulder = true;
				header = buf[i++];
			}

			if (header == (byte) 12) {
				this.GamepadButtons_RightShoulder = true;
				header = buf[i++];
			}

			if (header == (byte) 13) {
				this.GamepadButtons_LeftThumbstick = true;
				header = buf[i++];
			}

			if (header == (byte) 14) {
				this.GamepadButtons_RightThumbstick = true;
				header = buf[i++];
			}

			if (header != (byte) 0x7f)
				throw new InputMismatchException(format("colfer: unknown header at byte %d", i - 1));
		} finally {
			if (i > end && end - offset < GamepadButtons.colferSizeMax) throw new BufferUnderflowException();
			if (i < 0 || i - offset > GamepadButtons.colferSizeMax)
				throw new SecurityException(format("colfer: io.github.kitswas/VGP_Data_Exchange.GamepadButtons exceeds %d bytes", GamepadButtons.colferSizeMax));
			if (i > end) throw new BufferUnderflowException();
		}

		return i;
	}

	// {@link Serializable} version number.
	private static final long serialVersionUID = 15L;

	// {@link Serializable} Colfer extension.
	private void writeObject(ObjectOutputStream out) throws IOException {
		byte[] buf = new byte[marshalFit()];
		int n = marshal(buf, 0);
		out.writeInt(n);
		out.write(buf, 0, n);
	}

	// {@link Serializable} Colfer extension.
	private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {
		init();

		int n = in.readInt();
		byte[] buf = new byte[n];
		in.readFully(buf);
		unmarshal(buf, 0);
	}

	// {@link Serializable} Colfer extension.
	private void readObjectNoData() throws ObjectStreamException {
		init();
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_None.
	 * @return the value.
	 */
	public boolean getGamepadButtons_None() {
		return this.GamepadButtons_None;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_None.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_None(boolean value) {
		this.GamepadButtons_None = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_None.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_None(boolean value) {
		this.GamepadButtons_None = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_Menu.
	 * @return the value.
	 */
	public boolean getGamepadButtons_Menu() {
		return this.GamepadButtons_Menu;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_Menu.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_Menu(boolean value) {
		this.GamepadButtons_Menu = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_Menu.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_Menu(boolean value) {
		this.GamepadButtons_Menu = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_View.
	 * @return the value.
	 */
	public boolean getGamepadButtons_View() {
		return this.GamepadButtons_View;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_View.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_View(boolean value) {
		this.GamepadButtons_View = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_View.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_View(boolean value) {
		this.GamepadButtons_View = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_A.
	 * @return the value.
	 */
	public boolean getGamepadButtons_A() {
		return this.GamepadButtons_A;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_A.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_A(boolean value) {
		this.GamepadButtons_A = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_A.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_A(boolean value) {
		this.GamepadButtons_A = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_B.
	 * @return the value.
	 */
	public boolean getGamepadButtons_B() {
		return this.GamepadButtons_B;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_B.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_B(boolean value) {
		this.GamepadButtons_B = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_B.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_B(boolean value) {
		this.GamepadButtons_B = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_X.
	 * @return the value.
	 */
	public boolean getGamepadButtons_X() {
		return this.GamepadButtons_X;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_X.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_X(boolean value) {
		this.GamepadButtons_X = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_X.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_X(boolean value) {
		this.GamepadButtons_X = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_Y.
	 * @return the value.
	 */
	public boolean getGamepadButtons_Y() {
		return this.GamepadButtons_Y;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_Y.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_Y(boolean value) {
		this.GamepadButtons_Y = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_Y.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_Y(boolean value) {
		this.GamepadButtons_Y = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadUp.
	 * @return the value.
	 */
	public boolean getGamepadButtons_DPadUp() {
		return this.GamepadButtons_DPadUp;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadUp.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_DPadUp(boolean value) {
		this.GamepadButtons_DPadUp = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadUp.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_DPadUp(boolean value) {
		this.GamepadButtons_DPadUp = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadDown.
	 * @return the value.
	 */
	public boolean getGamepadButtons_DPadDown() {
		return this.GamepadButtons_DPadDown;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadDown.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_DPadDown(boolean value) {
		this.GamepadButtons_DPadDown = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadDown.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_DPadDown(boolean value) {
		this.GamepadButtons_DPadDown = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadLeft.
	 * @return the value.
	 */
	public boolean getGamepadButtons_DPadLeft() {
		return this.GamepadButtons_DPadLeft;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadLeft.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_DPadLeft(boolean value) {
		this.GamepadButtons_DPadLeft = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadLeft.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_DPadLeft(boolean value) {
		this.GamepadButtons_DPadLeft = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadRight.
	 * @return the value.
	 */
	public boolean getGamepadButtons_DPadRight() {
		return this.GamepadButtons_DPadRight;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadRight.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_DPadRight(boolean value) {
		this.GamepadButtons_DPadRight = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_DPadRight.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_DPadRight(boolean value) {
		this.GamepadButtons_DPadRight = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_LeftShoulder.
	 * @return the value.
	 */
	public boolean getGamepadButtons_LeftShoulder() {
		return this.GamepadButtons_LeftShoulder;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_LeftShoulder.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_LeftShoulder(boolean value) {
		this.GamepadButtons_LeftShoulder = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_LeftShoulder.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_LeftShoulder(boolean value) {
		this.GamepadButtons_LeftShoulder = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_RightShoulder.
	 * @return the value.
	 */
	public boolean getGamepadButtons_RightShoulder() {
		return this.GamepadButtons_RightShoulder;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_RightShoulder.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_RightShoulder(boolean value) {
		this.GamepadButtons_RightShoulder = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_RightShoulder.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_RightShoulder(boolean value) {
		this.GamepadButtons_RightShoulder = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_LeftThumbstick.
	 * @return the value.
	 */
	public boolean getGamepadButtons_LeftThumbstick() {
		return this.GamepadButtons_LeftThumbstick;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_LeftThumbstick.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_LeftThumbstick(boolean value) {
		this.GamepadButtons_LeftThumbstick = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_LeftThumbstick.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_LeftThumbstick(boolean value) {
		this.GamepadButtons_LeftThumbstick = value;
		return this;
	}

	/**
	 * Gets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_RightThumbstick.
	 * @return the value.
	 */
	public boolean getGamepadButtons_RightThumbstick() {
		return this.GamepadButtons_RightThumbstick;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_RightThumbstick.
	 * @param value the replacement.
	 */
	public void setGamepadButtons_RightThumbstick(boolean value) {
		this.GamepadButtons_RightThumbstick = value;
	}

	/**
	 * Sets io.github.kitswas/VGP_Data_Exchange.GamepadButtons.GamepadButtons_RightThumbstick.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public GamepadButtons withGamepadButtons_RightThumbstick(boolean value) {
		this.GamepadButtons_RightThumbstick = value;
		return this;
	}

	@Override
	public final int hashCode() {
		int h = 1;
		h = 31 * h + (this.GamepadButtons_None ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_Menu ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_View ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_A ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_B ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_X ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_Y ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_DPadUp ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_DPadDown ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_DPadLeft ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_DPadRight ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_LeftShoulder ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_RightShoulder ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_LeftThumbstick ? 1231 : 1237);
		h = 31 * h + (this.GamepadButtons_RightThumbstick ? 1231 : 1237);
		return h;
	}

	@Override
	public final boolean equals(Object o) {
		return o instanceof GamepadButtons && equals((GamepadButtons) o);
	}

	public final boolean equals(GamepadButtons o) {
		if (o == null) return false;
		if (o == this) return true;

		return this.GamepadButtons_None == o.GamepadButtons_None
			&& this.GamepadButtons_Menu == o.GamepadButtons_Menu
			&& this.GamepadButtons_View == o.GamepadButtons_View
			&& this.GamepadButtons_A == o.GamepadButtons_A
			&& this.GamepadButtons_B == o.GamepadButtons_B
			&& this.GamepadButtons_X == o.GamepadButtons_X
			&& this.GamepadButtons_Y == o.GamepadButtons_Y
			&& this.GamepadButtons_DPadUp == o.GamepadButtons_DPadUp
			&& this.GamepadButtons_DPadDown == o.GamepadButtons_DPadDown
			&& this.GamepadButtons_DPadLeft == o.GamepadButtons_DPadLeft
			&& this.GamepadButtons_DPadRight == o.GamepadButtons_DPadRight
			&& this.GamepadButtons_LeftShoulder == o.GamepadButtons_LeftShoulder
			&& this.GamepadButtons_RightShoulder == o.GamepadButtons_RightShoulder
			&& this.GamepadButtons_LeftThumbstick == o.GamepadButtons_LeftThumbstick
			&& this.GamepadButtons_RightThumbstick == o.GamepadButtons_RightThumbstick;
	}

}
